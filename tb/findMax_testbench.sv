// Module: findMax_testbench.sv
// Author: Rehan Iqbal
// Date: January 30, 2017
// Company: Portland State University
//
// Description:
// ------------
// Instantiates the device-under-test (findMax) and runs through a series of
// byte sequences. These are randomly generated bytes which range in value from
// 0 to 255. The number of bytes sent varies between 1 & 16.
//
//
// The testbench will run for a user-specified number of trials before ending.
// It will write results to a local textfile specifying the data bytes sent out
// and the maxValue & minValue returned by the DUT.
// 
///////////////////////////////////////////////////////////////////////////////

`include "definitions.pkg"

module findMax_testbench;

	timeunit 1ns;
	timeprecision 100ps;

	/*************************************************************************/
	/* Local parameters and variables										 */
	/*************************************************************************/

	ulogic1		clk_tb			= 1'b0;		// clock signal to the DUT
	ulogic1		reset_tb		= 1'b0;		// active-high reset to the DUT
	ulogic1		start_tb		= 1'b0;		// active-high start signal to the DUT
	ulogic8		inputA_tb		= 1'b0;		// data byte inputs to the DUT

	ulogic8		maxValue_tb;				// maximum value returned by DUT
	ulogic8		minValue_tb;				// minimum value returned by DUT
	ulogic1		done_tb;					// active-high completion signal from DUT

	int 		fhandle;					// integer to hold file location
	uint8		bytes;						// # of data bytes to send in a sequence

	/*************************************************************************/
	/* Instantiating the DUT												 */
	/*************************************************************************/

	findMax DUT (

		.clk			(clk_tb),			// I [0:0] clock signal to the circuit
		.reset			(reset_tb), 		// I [0:0] assert high to reset the circuit
		.start			(start_tb), 		// I [0:0] assert high to start data input
		.inputA			(inputA_tb),		// I [7:0] data byts to be considered

		.maxValue		(maxValue_tb),		// O [7:0] current max value of the sequence
		.minValue		(minValue_tb),		// O [7:0] current min value of the sequence
		.done			(done_tb)			// O [0:0] goes high when final value determined

		);

	/*************************************************************************/
	/* Running the testbench simluation										 */
	/*************************************************************************/

	// keep the clock ticking
	always begin
		#0.5 clk_tb <= !clk_tb;
	end

	// main simulation loop

	initial begin

		// format time units for printing later
		// also setup the output file location

		$timeformat(-9, 0, "ns", 8);
		fhandle = $fopen("C:/Users/riqbal/Desktop/findMax_results.txt");

		// toggle the resets to start the FSM
		#5 reset_tb = 1'b1;
		#5 reset_tb = 1'b0;

		for (int j = 1; j <= trials; j++) begin

			bytes = $urandom_range(16,1);
			$fwrite(fhandle,"\nSending %d number of bytes to module...\n", bytes);

			for (int i = 1; i <= bytes; i++) begin
				#1 inputA_tb = $urandom_range(8'b11111111,8'b0);
				start_tb = 1'b1;
				$fstrobe(fhandle,"Time:%t\t\tinputA: %d\t\tmaxValue: %d\t\tminValue: %d\t\t", $time, inputA_tb, maxValue_tb, minValue_tb);
			end

			#1 start_tb = 1'b0;
			$fstrobe(fhandle,"Time:%t\t\t\t\t\t\tmaxValue: %d\t\tminValue: %d\t\t", $time, maxValue_tb, minValue_tb);
			#5;
		end

		// wrap up file writing & finish simulation
		$fwrite(fhandle, "\nEND OF FILE");
		$fclose(fhandle);
		$stop;

	end

endmodule